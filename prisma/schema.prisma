generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  name   String
  email  String @unique @db.VarChar(255) // email must be unique
  pfp    String
  arcs   Arc[]

  currentStatus String
  // SocialLinks   String[]
  createdAt     DateTime @default(now())
}

model Arc {
  id             String        @id @default(uuid())
  title          String
  description    String
  type           String
  image          String
  completiontime DateTime
  status         String
  profileId      String
  profile        Profile       @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  todo           ArcTodos[]
  isCompleted    Boolean       @default(false)
  Notes          Notes[]
  ArcProgress    ArcProgress[]

  @@index([profileId])
}

model ArcTodos {
  id            String        @id @default(uuid())
  dateTime      DateTime      @default(now())
  todo          String
  arcId         String
  arc           Arc           @relation(fields: [arcId], references: [id], onDelete: Cascade)
  isChecked     Boolean       @default(false)
  IsCheckedTime DateTime?
  ArcProgress   ArcProgress[]
  isReminder    Boolean
  Reminder      DateTime?

  @@index([arcId])
}

//todoist integration

// 52finger45@ayush

model ArcProgress {
  id       String   @id @default(uuid())
  dateTime DateTime @default(now())
  update   String

  arcId String
  arc   Arc    @relation(fields: [arcId], references: [id], onDelete: Cascade)

  isChecked  Boolean   @default(false)
  ArcTodos   ArcTodos? @relation(fields: [arcTodosId], references: [id])
  arcTodosId String?

  @@index([arcId])
}

model Notes {
  id      String @id @default(uuid())
  content String
  arcId   String
  arc     Arc    @relation(fields: [arcId], references: [id], onDelete: Cascade)
}

//features
// arc title -> give todos -> ask ai to breakdown it -> ai will make each week target with daily todo till due date

// give arc title to ai -> ai will todos for weekwise and daywise with completeion date
// ai generated blogs of your arc   can be shared publicly 
//google calendar integrations

//basic functionality
// shareable link
//invite
//email
//blogs

//advance
//todist integration 
//reminders feature -> put thing here , where you can  set reminder for any task in todoist . or add reminderss
// create journal and notes

//feature
// check if person is free or not by checking his schedule
// if completion date is given then it will divide task from present date to completion date 
// task can be divide on week wise/day wise
// daily office task can be added from meetings and it can be marked once done

//things to brainstrom
// arc progress and arc todo context
// arc todo notes feature
// arc week feature with time completion

// reminder will take todos as a input
// nootes willbe saved under arc
